{"id":"00a5b818-80d8-4434-9415-1373491eb270","data":{"nodes":[{"id":"TextOutput-0C5i9","type":"genericNode","position":{"x":1167.417668516359,"y":471.72025679755325},"data":{"type":"TextOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as output.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Display a text output in the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextOutput-0C5i9"},"selected":false,"width":384,"height":298,"positionAbsolute":{"x":1167.417668516359,"y":471.72025679755325},"dragging":false},{"id":"CustomComponent-ue92E","type":"genericNode","position":{"x":523.973176349796,"y":180.63415002080256},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","path":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"path","value":"","display_name":"PDF","advanced":false,"input_types":["Data"],"dynamic":false,"info":"PDF file.","title_case":false,"type":"other","_input_type":"DataInput"},"batch_size":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"batch_size","value":"50","display_name":"Batch Size","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"chunk_size":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"chunk_size","value":"512","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.schema.message import Message\nfrom langflow.io import DropdownInput, DataInput, MessageTextInput, Output\n\nfrom llama_index.core import Document, Settings, StorageContext, SimpleDirectoryReader, SummaryIndex, VectorStoreIndex\nfrom llama_index.core import SummaryIndex, VectorStoreIndex\nfrom llama_index.core.tools import QueryEngineTool\nfrom llama_index.core.query_engine.router_query_engine import RouterQueryEngine\nfrom llama_index.core.selectors import LLMSingleSelector\nfrom llama_index.embeddings.openai import OpenAIEmbedding\nfrom llama_index.llms.openai import OpenAI\n\nfrom typing import List\nimport json\n\nclass LammaIndexComponent(Component):\n    display_name = \"LammaIndexComponent\"\n    description = \"Run agents with Lamma Index.\"\n    documentation: str = \"https://www.llamaindex.ai\"\n    icon = \"custom_components\"\n    name = \"CustomComponent\"\n\n    inputs = [\n        DataInput(\n            name=\"path\",\n            display_name=\"PDF\",\n            info=\"PDF file.\",\n        ),\n        StrInput(name=\"openai_api_key\", display_name=\"Open AI API KEY\"),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\"),\n        IntInput(name=\"batch_size\", display_name=\"Batch Size\"),\n        DropdownInput(\n            name=\"openai_embeddings_model\",\n            display_name=\"Embeddings Model\",\n            advanced=False,\n            options=[\n                \"text-embedding-3-small\",\n                \"text-embedding-3-large\",\n            ],\n            value=\"text-embedding-3-large\",\n        ),\n        DropdownInput(\n            name=\"openai_llm_model\",\n            display_name=\"LLM Model\",\n            advanced=False,\n            options=[\n                \"gpt-4o\",\n                \"gpt-4o-mini\",\n            ],\n            value=\"gpt-4o\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Answer\", name=\"output\", method=\"build_output\"),\n    ]\n    \n    def build_output(self) -> Message:\n        llm = OpenAI(\n            model=self.openai_llm_model,\n            api_key=self.openai_api_key,\n        )\n        \n        embed_model = OpenAIEmbedding(\n            model=self.openai_embeddings_model,\n            api_key=self.openai_api_key,\n            embed_batch_size=self.batch_size\n        )\n        \n        Settings.llm = llm\n        Settings.embed_model = embed_model\n        Settings.chunk_size = self.chunk_size\n        Settings.chunk_overlap = 0\n        \n        reader = SimpleDirectoryReader(input_files=[self.path.text])\n        documents = reader.load_data()\n        \n        summary_index = SummaryIndex.from_documents(documents)\n        vector_index = VectorStoreIndex.from_documents(documents)\n        \n        parent = os.path.dirname(self.path.text)\n        \n        summary_index.storage_context.persist(persist_dir=f'{parent}/docs_summary_index')\n        vector_index.storage_context.persist(persist_dir=f'{parent}/docs_vector_index')\n        \n        summary_query_engine = summary_index.as_query_engine(\n            response_mode=\"tree_summarize\",\n            use_async=True,\n        )\n        \n        vector_query_engine = vector_index.as_query_engine()\n\n        summary_tool = QueryEngineTool.from_defaults(\n            query_engine=summary_query_engine,\n            description=(\n                \"Useful for summarization questions related to MetaGPT\"\n            ),\n        )\n\n        vector_tool = QueryEngineTool.from_defaults(\n            query_engine=vector_query_engine,\n            description=(\n                \"Useful for retrieving specific context from the MetaGPT paper.\"\n            ),\n        )\n\n        query_engine = RouterQueryEngine(\n            selector=LLMSingleSelector.from_defaults(),\n            query_engine_tools=[\n                summary_tool,\n                vector_tool,\n            ],\n            verbose=True\n        )\n        \n        response = query_engine.query(\n            \"\"\"1. List the main topics of this document in the same language of the document.\n               2. Return a list of topic names in a json list without any extra tags.\n            \"\"\"\n        )\n    \n        \n        topics = json.loads(str(response)) \n        \n        response = query_engine.query(\n            \"\"\"1. Use the topic below and the document to create a quiz of the same language of the document.\n                2. Create 4 short questions and 4 short answers for each question.\n                3. Mark 1 of the answers as valid.\n                4. Return the quiz in json format without any extra tags.\n                5. Use boolean for the valid answer.\n                6. Follow the json format below.\n               \n               Topic: {topic}\n               \n               Format: {{\n                   \"quiz\": [\n                           {{\n                               \"question\": \"Question 1\",\n                               \"options\": [\n                                   {{\"answer\": \"Answer 1\", \"valid\": false}},\n                                   {{\"answer\": \"Answer 2\", \"valid\": true}},\n                                   {{\"answer\": \"Answer 3\", \"valid\": false}},\n                                   {{\"answer\": \"Answer 4\", \"valid\": false}}\n                               ]\n                           }},\n                           {{\n                               \"question\": \"Question 2\",\n                               \"options\": [\n                                   {{\"answer\": \"Answer 1\", \"valid\": true}},\n                                   {{\"answer\": \"Answer 2\", \"valid\": false}},\n                                   {{\"answer\": \"Answer 3\", \"valid\": false}},\n                                   {{\"answer\": \"Answer 4\", \"valid\": false}}\n                               ]\n                           }}\n                       ]\n               }}\n            \"\"\".format(topic=topics[0])\n        )\n        \n        print(str(response))\n        \n        message = Message(\n            text=str(response)\n        )\n       \n        self.output.value = message\n        self.status = message\n        \n        return message\n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"openai_api_key":{"trace_as_metadata":true,"load_from_db":true,"list":false,"required":false,"placeholder":"","show":true,"name":"openai_api_key","value":"OPENAI_API_KEY","display_name":"Open AI API KEY","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"openai_embeddings_model":{"trace_as_metadata":true,"options":["text-embedding-3-small","text-embedding-3-large"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"openai_embeddings_model","value":"text-embedding-3-large","display_name":"Embeddings Model","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput"},"openai_llm_model":{"trace_as_metadata":true,"options":["gpt-4o","gpt-4o-mini"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"openai_llm_model","value":"gpt-4o","display_name":"LLM Model","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput"}},"description":"Run agents with Lamma Index.","icon":"custom_components","base_classes":["Message"],"display_name":"LlamaIndex Agent","documentation":"https://www.llamaindex.ai","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"output","display_name":"Answer","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["path","openai_api_key","chunk_size","batch_size","openai_embeddings_model","openai_llm_model"],"beta":false,"edited":true},"id":"CustomComponent-ue92E"},"selected":true,"width":384,"height":690,"positionAbsolute":{"x":523.973176349796,"y":180.63415002080256},"dragging":false},{"id":"File-OWK5n","type":"genericNode","position":{"x":-10.552267394057253,"y":410.8741480537736},"data":{"type":"File","node":{"template":{"_type":"Component","path":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx"],"list":false,"required":false,"placeholder":"","show":true,"name":"path","value":"","display_name":"Path","advanced":false,"dynamic":false,"info":"Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx","title_case":false,"type":"file","_input_type":"FileInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, Output\nfrom langflow.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = Data(text=resolved_path)\n        self.status = data if data else \"No data\"\n        return data or Data()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"silent_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"silent_errors","value":false,"display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"A generic file loader.","icon":"file-text","base_classes":["Data"],"display_name":"File","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"load_file","value":"__UNDEFINED__","cache":true}],"field_order":["path","silent_errors"],"beta":false,"edited":true},"id":"File-OWK5n"},"selected":false,"width":384,"height":298,"positionAbsolute":{"x":-10.552267394057253,"y":410.8741480537736},"dragging":false}],"edges":[{"source":"CustomComponent-ue92E","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-ue92Eœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}","target":"TextOutput-0C5i9","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-0C5i9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextOutput-0C5i9","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"CustomComponent","id":"CustomComponent-ue92E","name":"output","output_types":["Message"]}},"id":"reactflow__edge-CustomComponent-ue92E{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-ue92Eœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-0C5i9{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-0C5i9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"File-OWK5n","sourceHandle":"{œdataTypeœ:œFileœ,œidœ:œFile-OWK5nœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"CustomComponent-ue92E","targetHandle":"{œfieldNameœ:œpathœ,œidœ:œCustomComponent-ue92Eœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"path","id":"CustomComponent-ue92E","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"File","id":"File-OWK5n","name":"data","output_types":["Data"]}},"id":"reactflow__edge-File-OWK5n{œdataTypeœ:œFileœ,œidœ:œFile-OWK5nœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-CustomComponent-ue92E{œfieldNameœ:œpathœ,œidœ:œCustomComponent-ue92Eœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""}],"viewport":{"x":11.927551175810322,"y":-67.30857267962784,"zoom":0.7311486076797435}},"description":"Desafio Final - Inovação Aberta com Langflow","name":"Desafio 4 - Inovação Aberta com Langflow","last_tested_version":"1.0.16","endpoint_name":"desafio-4","is_component":false}